name: Build and Deploy Jekyll Site

on:
  push:
    branches:
      - main  # or master, depending on your default branch name

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for .GitInfo and .Lastmod
      
      - name: Read Ruby version from .ruby-version if exists
        id: ruby-version
        run: |
          if [ -f ".ruby-version" ]; then
            echo "version=$(cat .ruby-version)" >> $GITHUB_OUTPUT
          else
            echo "version=3.1" >> $GITHUB_OUTPUT  # Fallback version
          fi
      
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ steps.ruby-version.outputs.version }}
          bundler-cache: true  # This will cache dependencies
      
      - name: Install dependencies
        run: |
          gem install bundler
          bundle install
      
      - name: Build Jekyll site
        run: bundle exec jekyll build
      
      # New simplified deployment approach
      - name: Deploy to GitHub Pages
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          
          # Create or use orphan branch for GitHub Pages
          git checkout --orphan gh-pages
          
          # Remove everything except _site directory
          find . -maxdepth 1 -not -path "./_site" -not -path "./.git" -not -path "." -exec rm -rf {} \;
          
          # Move contents of _site to root
          mv _site/* .
          rmdir _site
          
          # Add all changes to git
          git add -A
          git commit -m "Deploy Jekyll site to GitHub Pages"
          
          # Force push to the gh-pages branch
          git push -f origin gh-pages
